/// <summary>
/// Activates the version.
/// </summary>
/// <param name="callContext">The service call context.</param>
/// <param name="parent">The $parent$.</param>
/// <param name="versionId">The version.</param>
/// <returns></returns>
public CallResponse<$Product$$Item$> ActivateVersion(ICallContext callContext, $Product$$Parent$ parent, $Item$ version)
{
	I$Product$$Item$ $item$ = Get$Item$($item$Id, callContext);
	I$Product$$Item$Version version = _$item$VersionFactory.Get($item$, versionId, ApplicationProvider.SessionContextGuid, callContext);
	version.ActivateVersion();

	foreach (var $item$Version in $item$.$Item$Versions)
	{
		if ($item$Version.Key.Version != versionId && $item$Version.IsActive)
		{
			$item$Version.Data[$Product$$Item$VersionDataFields.IS_ACTIVE] = false;
			$item$Version.Data[$Product$$Item$VersionDataFields.LUPD_TIMESTAMP] = version.LupdTimestamp;
			$item$Version.Accept();
		}
	}
	$item$.$Item$Versions.Accept();
	$item$.Accept();
	return CallResponse.FromSuccessfulResult($Product$DtoFactory.Create$Item$VersionFromBO(version));
}

/// <summary>
/// Deactivates the version.
/// </summary>
/// <param name="callContext">The service call context.</param>
/// <param name="parent">The $parent$.</param>
/// <param name="versionId">The version.</param>
/// <returns></returns>
public CallResponse<$Product$$Item$> DeactivateVersion(ICallContext callContext, $Product$$Parent$ parent, $Item$ version)
{
	I$Product$$Item$ $item$ = Get$Item$($item$Id, callContext);
	I$Product$$Item$Version version = _$item$VersionFactory.Get($item$, versionId, ApplicationProvider.SessionContextGuid, callContext);
	version.DeactivateVersion();
	return CallResponse.FromSuccessfulResult($Product$DtoFactory.Create$Item$VersionFromBO(version));
}

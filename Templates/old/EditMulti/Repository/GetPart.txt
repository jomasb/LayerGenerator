/// <summary>
/// Gets the $Item$s asynchronous.
/// </summary>
/// <param name="callContext">The call context.</param>
/// <returns></returns>
public async Task<CallResponse<IList<$Product$$Item$DataItem>>> Get$Item$sAsync(IRepositoryCallContext callContext)
{
	try
	{
		IList<$Product$$Item$DataItem> $item$DataItems = new List<$Product$$Item$DataItem>();

		var callResponse = await _$product$$Item$Service.Get$Item$sAsync(callContext).ConfigureAwait(false);

		if (callResponse.IsSuccess)
		{
			IList<$Product$$Item$> $item$s = callResponse.Result;
			foreach ($Product$$Item$ $item$ in $item$s)
			{
				$Product$$Item$DataItem $item$DataItem = _$product$DataItemFactory.Create$Item$FromDto($item$);
				$item$DataItem.Accept();
				$item$DataItems.Add($item$DataItem);
			}
		}

		return CallResponse.FromResponse(callResponse, _ => $item$DataItems);
	}
	catch (Exception ex)
	{
		return CallResponse.FromException<IList<$Product$$Item$DataItem>>(ex);
	}
}

/// <summary>
/// Gets the $Item$s.
/// </summary>
/// <param name="callContext">The call context.</param>
/// <returns></returns>
public PlusLazyLoadingAsyncObservableCollection<$Product$$Item$DataItem> Get$Item$s(IRepositoryCallContext callContext)
{
	return new PlusLazyLoadingAsyncObservableCollection<$Product$$Item$DataItem>(() => Get$Item$sAsync(callContext))
	{
		AutoAcceptAfterSuccessfullyLoading = true
	};
}
/// <summary>
/// Saves the $Item$ asynchronous.
/// </summary>
/// <param name="callContext">The call context.</param>
/// <param name="$item$DataItems">The $Item$s.</param>
/// <returns></returns>
public async Task<CallResponse<PlusObservableCollection<$Product$$Item$DataItem>>> Save$Item$sAsync(IRepositoryCallContext callContext, PlusObservableCollection<$Product$$Item$DataItem> $item$DataItems$specialContent4$)
{
	try
	{
		List<$Product$$Item$> $item$Dtos = new List<$Product$$Item$>();
		
		//Add all deleted elements
		foreach ($Product$$Item$DataItem $item$DataItem in $item$DataItems.DeletedItems)
		{
			$Product$$Item$ $item$ = _$product$DtoFactory.Create$Item$FromDataItem($item$DataItem);
			$item$.SaveFlag = SaveFlag.Delete;
			$item$Dtos.Add($item$);
		}

		//Add all new elements
		foreach ($Product$$Item$DataItem $item$DataItem in $item$DataItems.Where(x => x.State == DataItemState.New))
		{
			$Product$$Item$ create$Item$ = _$product$DtoFactory.Create$Item$FromDataItem($item$DataItem);
			create$Item$.SaveFlag = SaveFlag.New;
			$item$Dtos.Add(create$Item$);
		}
		
		//Add all edited elements
		foreach ($Product$$Item$DataItem $item$DataItem in $item$DataItems.Where(x => x.State == DataItemState.Persistent && x.HasChanges))
		{
			$Product$$Item$ create$Item$ = _$product$DtoFactory.Create$Item$FromDataItem($item$DataItem);
			create$Item$.SaveFlag = SaveFlag.Modified;
			$item$Dtos.Add(create$Item$);
		}
		
		CallResponse<IList<$Product$$Item$>> response = await _$product$$Item$Service.Save$Item$sAsync(callContext, $item$Dtos$specialContent3$, $item$DataItems.Max(t => t.LupdTimestamp));
		if (response.IsSuccess)
		{
			foreach ($Product$$Item$ dto in response.Result)
			{
				$Product$$Item$DataItem dataItem = $item$DataItems.FirstOrDefault(x => $specialContent1$);
				if (dataItem != null)
				{
					$specialContent2$
					dataItem.LupdUser = dto.LupdUser;
					dataItem.LupdTimestamp = dto.LupdTimestamp;
					dataItem.State = DataItemState.Persistent;
				}
			}
			
			$item$DataItems.AcceptDeep();

			return CallResponse.FromSuccessfulResult($item$DataItems);
		}

		return CallResponse.FromFailedResult<PlusObservableCollection<$Product$$Item$DataItem>>(null);
	}
	catch (Exception ex)
	{
		return CallResponse.FromException<PlusObservableCollection<$Product$$Item$DataItem>>(ex);
	}
}
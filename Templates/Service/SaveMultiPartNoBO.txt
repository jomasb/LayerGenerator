/// <summary>
/// Saves the $item$s asynchronous.
/// </summary>
/// <param name="serviceCallContext">The service call context.</param>
/// <param name="$item$Dtos">The $item$ dtos.</param>
/// <returns></returns>
public Task<CallResponse<IList<$Product$$Item$>>> Save$Item$sAsync(IServiceCallContext serviceCallContext, IList<$Product$$Item$> $item$Dtos)
{
	ServiceCallContext = serviceCallContext;
	return GetDataTandemResponseAsync(() => Save$Item$s($item$Dtos), serviceCallContext);
}

/// <summary>
/// Saves the $item$s.
/// </summary>
/// <param name="$item$Dtos">The $item$ dtos.</param>
/// <returns></returns>
private CallResponse<IList<$Product$$Item$>> Save$Item$s(IList<$Product$$Item$> $item$Dtos)
{
	using (TraceLog.Log(this, options: TraceLogOptions.All))
	{
		$Product$$Item$s.Clear();
		IDictionary<string, object> arguments = new Dictionary<string, object>();

		//filter the new and deleted $Item$s
		var $item$s = from $item$Dto in $item$Dtos
								   where $item$Dto.SaveFlag.Equals(SaveFlag.New) || $item$Dto.SaveFlag.Equals(SaveFlag.Delete) || $item$Dto.SaveFlag.Equals(SaveFlag.Modified)
								   select $item$Dto;

		var $item$sToSave = $item$s as IList<$Product$$Item$> ?? $item$s.ToList();

		arguments.Add("$Item$sToSave", $item$sToSave);

		if (!DataAdapter.Execute<I$Product$$Item$Service>(this, "Save$Item$List", ref arguments))
		{
			return CallResponse.FromFailedResult($Product$$Item$s);
		}

		return CallResponse.FromSuccessfulResult($Product$$Item$s);
	}
}
/// <summary>
/// Activates the version asynchronous.
/// </summary>
/// <param name="serviceCallContext">The service call context.</param>
/// <param name="parent">The $parent$.</param>
/// <param name="versionId">The version.</param>
/// <returns></returns>
public Task<CallResponse<$Product$$Item$>> ActivateVersionAsync(IServiceCallContext serviceCallContext, $Product$$Parent$ parent, $Product$$Item$ version)
{
	return Task.Factory.StartNew(() =>
	{
		Thread.Sleep(500);
		version.LupdTimestamp = DateTime.Now;
		version.LupdUser = "JMAN";
		version.SaveFlag = SaveFlag.Persistent;
		version.IsActive = true;
		return CallResponse.FromSuccessfulResult(version);
	});
}

/// <summary>
/// Deactivates the version asynchronous.
/// </summary>
/// <param name="serviceCallContext">The service call context.</param>
/// <param name="parent">The $parent$.</param>
/// <param name="versionId">The version.</param>
/// <returns></returns>
public Task<CallResponse<$Product$$Item$>> DeactivateVersionAsync(IServiceCallContext serviceCallContext, $Product$$Parent$ parent, $Product$$Item$ version)
{
	return Task.Factory.StartNew(() =>
	{
		Thread.Sleep(500);
		version.LupdTimestamp = DateTime.Now;
		version.LupdUser = "JMAN";
		version.SaveFlag = SaveFlag.Persistent;
		version.IsActive = false;
		return CallResponse.FromSuccessfulResult(version);
	});
}

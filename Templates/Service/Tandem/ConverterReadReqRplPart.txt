#region I$Server$$ReqRpl$BusinessObject Members

/// <summary>
/// Converts the business data to message data.
/// </summary>
/// <param name="serviceMessage">The service message.</param>
public void ConvertBusinessDataToMessageData$Server$$ReqRpl$($Server$$ReqRpl$ serviceMessage)
{
	if (serviceMessage != null)
	{
		serviceMessage.MultiReply(true);
	}
}

#endregion I$Server$$ReqRpl$BusinessObject Members

#region I$Server$$ReqRpl$BusinessObject Members

/// <summary>
/// Converts the message data to business data.
/// </summary>
/// <param name="serviceMessage">The service message.</param>
/// <exception cref="NotImplementedException"></exception>
public void ConvertMessageDataToBusinessData$Server$$ReqRpl$($Server$$ReqRpl$ serviceMessage)
{
	var transcode = serviceMessage.Transcode();
	if (!transcode.Equals($Server$$ReqRpl$Transcode.$Transcode$))
		return;
	if (serviceMessage == null)
	{
		throw new ArgumentNullException("serviceMessage");
	}
	if (!serviceMessage.IsTranssteuerungOk())
		return;

	IList<$Product$$Item$> $item$s = Arguments["$Item$s"] as IList<$Product$$Item$>;
	for (int i = 0; i < serviceMessage.$TabAnz$(); i++)
	{
		$Product$$Item$ $item$ = new $Product$$Item$();
		Fill$Item$FromMessage($item$, serviceMessage, i);
		$item$s.Add($item$);
	}
}

#endregion I$Server$$ReqRpl$BusinessObject Members
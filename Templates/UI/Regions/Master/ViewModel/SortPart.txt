private bool Sort$Item$DataItemUpCommandCanExecute()
{
	return !IsBusy && !IsInReadOnlyMode && $specialContent1$ != null && $specialContent1$.Count > 1 && Selected$Item$DataItem != null && Selected$Item$DataItem.Id > $specialContent1$.Min(x => x.Id);
}

private async Task Sort$Item$DataItemUpCommandExecute()
{
	CallResponse<$Product$$Item$DataItem> response = await _$product$$Dialog$Repository.Move$Item$OrderUpAsync(CreateNewCallContext(), $specialContent1$, Selected$Item$DataItem);
	Resort(response.Result);

}

private bool Sort$Item$DataItemDownCommandCanExecute()
{
	return !IsBusy && !IsInReadOnlyMode && Selected$Item$DataItem != null && $specialContent1$ != null && Selected$Item$DataItem.Id < $specialContent1$.Count;
}

private async Task Sort$Item$DataItemDownCommandExecute()
{
	CallResponse<$Product$$Item$DataItem> response = await _$product$$Dialog$Repository.Move$Item$OrderDownAsync(CreateNewCallContext(), $specialContent1$, Selected$Item$DataItem);
	Resort(response.Result);
}

private void Resort($Product$$Item$DataItem toBeSelectedItem)
{
	Selected$Item$DataItem = toBeSelectedItem;
	RaiseCanExecuteChanged();
}


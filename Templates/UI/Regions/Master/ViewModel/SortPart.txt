private bool Sort$Item$UpCommandCanExecute()
{
	return !IsBusy && !IsInReadOnlyMode$specialContent2$ && $specialContent1$.Count > 1 && Selected$Item$DataItem != null && Selected$Item$DataItem.Sequence > $specialContent1$.Min(x => x.Sequence);
}

private async Task Sort$Item$UpCommandExecuted()
{
	CallResponse<$Product$$Item$DataItem> response = await _$product$$Dialog$Repository.Move$Item$OrderUpAsync(CreateNewCallContext(), $specialContent1$, Selected$Item$DataItem);
	Resort(response.Result);

}

private bool Sort$Item$DownCommandCanExecute()
{
	return !IsBusy && !IsInReadOnlyMode && Selected$Item$DataItem != null$specialContent2$ && Selected$Item$DataItem.Sequence < $specialContent1$.Count;
}

private async Task Sort$Item$DownCommandExecuted()
{
	CallResponse<$Product$$Item$DataItem> response = await _$product$$Dialog$Repository.Move$Item$OrderDownAsync(CreateNewCallContext(), $specialContent1$, Selected$Item$DataItem);
	Resort(response.Result);
}

private void Resort($Product$$Item$DataItem toBeSelectedItem)
{
	Selected$Item$DataItem = toBeSelectedItem;
	RaiseCanExecuteChanged();
}


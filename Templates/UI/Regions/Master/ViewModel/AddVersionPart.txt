/// <summary>
/// Adds the $item$ version command can execute.
/// </summary>
/// <returns></returns>
public override bool AddVersionCommandCanExecute()
{
	if (_activeItem != null && _activeItem.HasAnyChanges && !IsBusy)
	{
		return false;
	}

	var $item$ = _activeItem as $Product$$Item$DataItem;

	if ($item$ == null && _activeItem != null)
	{
		$item$ = _activeItem.Parent.Parent as $Product$$Item$DataItem;
	}

	return !IsBusy && !IsInReadOnlyMode && !IsDirty && $item$ != null;
}

/// <summary>
/// Adds the $item$ version command executed.
/// </summary>
/// <exception cref="System.NotImplementedException"></exception>
private async Task AddVersionCommandExecuted()
{
	$Product$$Item$DataItem $item$ = ActiveItem as $Product$$Item$DataItem;

	if ($item$ == null && _activeItem != null)
	{
		$item$ = _activeItem.Parent.Parent as $Product$$Item$DataItem;
	}

	if ($item$ != null)
	{
		if (!$item$.$Item$Versions.IsLoadingCompleted)
		{
			$item$.$Item$Versions.Load();
		}

		IsGlobalBusy = true;
		CallResponse<$Product$$Version$DataItem> response = await _$product$$Dialog$Repository.AddNew$Version$Async(CreateNewCallContext(), $item$.$Item$Versions);
		if (response.IsSuccess)
		{
			$Product$$Version$DataItem new$Version$ = response.Result;
			$item$.MetaItem.IsExpanded = true;
			ActiveItem = new$Version$;
			new$Version$.HasChanges = true;
			new$Version$.PropertyChanged += New$Product$$Version$DataItem_PropertyChanged;
			$item$.$Item$Versions.HasAnyChanges = true;
			RaiseCanExecuteChanged();
		}
		IsGlobalBusy = false;
	}
}

private void New$Product$$Version$DataItem_PropertyChanged(object sender, PropertyChangedEventArgs e)
{
	RaiseCanExecuteChanged();
}

